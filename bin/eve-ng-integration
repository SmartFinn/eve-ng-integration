#!/usr/bin/env python
# See https://github.com/SmartFinn/eve-ng-integration

from __future__ import print_function
from subprocess import Popen, PIPE

import os
import sys


class Terminal(object):
    def __init__(self):
        self.current_desktop = os.getenv('XDG_CURRENT_DESKTOP')
        self.override_terminal = os.getenv('OVERRIDE_TERMINAL_CMD')

    def _is_command(self, command):
        for path in os.getenv('PATH', '').split(':'):
            if os.path.exists(os.path.join(path, command)) and \
                    os.access(os.path.join(path, command), os.X_OK):
                return True
        return False

    def _current_desktop(self, *desktops):
        if self.current_desktop is not None:
            current = self.current_desktop.lower()
            for desktop in desktops:
                if desktop in current:
                    return True
        return False

    def _terminal_emulator_cmd(self):
        if self.override_terminal:
            return self.override_terminal.split()
        elif self._is_command('x-terminal-emulator'):
            return ['x-terminal-emulator', '-e']
        elif self._current_desktop('cinnamon', 'gnome', 'unity'):
            return ['gnome-terminal', '-e']
        elif self._current_desktop('kde'):
            return ['konsole', '-e']
        elif self._current_desktop('lxde', 'lxqt'):
            return ['lxterminal', '-e']
        elif self._current_desktop('mate'):
            return ['mate-terminal', '-e']
        elif self._current_desktop('pantheon'):
            return ['pantheon-terminal', '-e']
        elif self._current_desktop('xfce'):
            return ['xfce4-terminal', '-e']
        elif self._is_command('urxvt'):
            return ['urxvt', '-e']
        elif self._is_command('st'):
            return ['st', '-e']
        else:
            return ['xterm', '-e']

    def execute(self, command):
        if isinstance(command, (str)):
            command = command.split('\n')
            if len(command) == 1:
                command = command[0].split()

        term = self._terminal_emulator_cmd()

        Popen(term + command)


def main(argv):
    try:
        from urllib.parse import urlparse
    except ImportError:
        from urlparse import urlparse

    url = urlparse(argv)
    term = Terminal()

    data = {
        'host': url.hostname or 'localhost',
        'port': url.port or '',
        'path': url.path.lstrip('/') or '',
    }

    if url.scheme == 'capture':
        cmd = 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
              -l root {host} tcpdump -i {path} -n -s 0 -U -w -'.format(**data)
        wireshark_cmd = 'wireshark -k -i -'

        tcpdump = Popen(cmd.split(), stdout=PIPE, preexec_fn=os.setsid)
        wireshark = Popen(wireshark_cmd.split(), stdin=tcpdump.stdout)
        wireshark.communicate()
    elif url.scheme == 'docker':
        cmd = 'docker -H {host}:{port} attach {path}'.format(**data)

        term.execute(cmd)
    elif url.scheme == 'telnet':
        cmd = 'telnet {host} {port}'.format(**data)

        term.execute(cmd)
    else:
        return '{}: The protocol {} is not supported.'.format(url.geturl(),
                                                              url.scheme)


if __name__ == '__main__':
    try:
        sys.exit(main(sys.argv[1]))
    except IndexError:
        print('usage:', __file__, '<url>', file=sys.stderr)
        sys.exit(1)
